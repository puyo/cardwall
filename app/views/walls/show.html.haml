%section.wall
  = form_for @wall do |form|
    .buttons
      = form.submit 'Save', :disabled => true

    #wall
      - @wall.cards.each do |card|
        = div_for(card, 'data-wall-id' => @wall.id, 'data-card-id' => card.id, style: "top: #{card.y}px; left: #{card.x}px;; z-index: #{card.z}", class: card.shadow? ? 'shadow' : nil) do
          .content{style: "background-color: #{card.bg_color}; width: #{card.w}px; height: #{card.h}px"}
            .text<
              :preserve
                #{h(card.text)}
          .edit_card_form{id: dom_id(card, 'edit')}
            = render 'cards/form', wall: @wall, card: card, form: form

      #multi_edit_card_form.edit_card_form
        = render 'cards/form', wall: @wall, card: Card.new(w: 160, h: 100), form: form

- content_for :javascript do
  :javascript
    $(function() {
      var cards = $("#wall").find('.card');
      var dragging = false;

      function bringToTop(elem) {
        // stolen from jquery.ui.draggable's stack functionality
        var group = $.makeArray(cards).sort(function(a,b) {
          return (parseInt($(a).css("zIndex"),10) || 0) - (parseInt($(b).css("zIndex"),10) || 0);
        });
        if (!group.length) { return; }
        var min = parseInt(group[0].style.zIndex) || 0;
        $(group).each(function(i) {
          this.style.zIndex = min + i;
        });
        elem[0].style.zIndex = min + group.length;
      }
      
      cards.find('.content').click(function() {
        if (dragging === false) {
          var card = $(this).closest('.card');
          var selected = card.hasClass('selected');
          bringToTop(card);
          cards.removeClass('selected');
          if (!selected) {
            card.addClass('selected');
            card.find('input:visible, textarea:visible').first().focus();
          }
        } else {
          dragging = false;
        }
      });

      cards.change(function(){
        $(this).addClass('changed');
        $('#wall_submit').addClass('changed').attr('disabled', false);
      });

      cards.draggable({
        containment: "#wall",
        disabled: false,
        stack: '.card',
        start: function() { dragging = true; },
        stop: function(event, ui) {
          var pos = $(this).position();
          $(this).find('.x_input').val(pos.left);
          $(this).find('.y_input').val(pos.top);
          cards.each(function(){
            $(this).find('.z_input').val($(this).css('z-index'));
          });
          $(this).trigger('change');
        }
      });

      cards.find('.text_input').bind('keydown keyup keypress', function(){
        var card = $(this).closest('.card');
        var text = card.find('.content .text');
        if ($(this).val() !== text.text()) {
          $(this).trigger('change');
        }
        card.find('.content .text').text($(this).val());
      });

      cards.find('.w_input').change(function(){ $(this).closest('.card').find('.content').css('width', $(this).val() + 'px'); });
      cards.find('.h_input').change(function(){ $(this).closest('.card').find('.content').css('height', $(this).val() + 'px'); });

      cards.find('.shadow_input').change(function(){
        var card = $(this).closest('.card');
        if ($(this).attr('checked')) {
          card.addClass('shadow');
        } else {
          card.removeClass('shadow');
        }
      });

      cards.find('.bg_color_input').bind('keydown keyup keypress', function(){
        $(this).closest('.card').find('.content').css('background-color', $(this).val());
        $(this).trigger('change');
      });

      $(document).bind('keydown.fb', function(e) {
        if (e.keyCode == 27) {
          $('.card').removeClass('selected');
        }
      });
    });
